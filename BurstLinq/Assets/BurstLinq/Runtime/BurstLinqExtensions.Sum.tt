<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new string[]
    {
        "int", "uint", "long", "ulong", "float", "double",
        "Vector2", "Vector2Int", "Vector3", "Vector3Int", "Vector4",
        "int2", "int3", "int4",
        "uint2", "uint3", "uint4",
        "float2", "float3", "float4",
        "double2", "double3", "double4",
    };
#>
using System;
using System.Collections.Generic;
using Unity.Mathematics;
using UnityEngine;

namespace BurstLinq
{
    public unsafe static partial class BurstLinqExtensions
    {
<# foreach(var type in types) { #>
        public static <#=type#> Sum(this <#=type#>[] source)
        {
            Error.ThrowIfNull(source);
            Error.ThrowIfEmpty(source.Length);
            fixed (<#=type#>* ptr = source)
            {
                SumCore(ptr, source.Length, out var result);
                return result;
            }
        }

        public static <#=type#> Sum(this List<<#=type#>> source)
        {
            Error.ThrowIfNull(source);
            Error.ThrowIfEmpty(source.Count);

            var span = SpanHelper.AsSpan(source);
            fixed (<#=type#>* ptr = span)
            {
                SumCore(ptr, source.Count, out var result);
                return result;
            }
        }

        public static <#=type#> Sum(this Memory<<#=type#>> source)
        {
            return Sum((ReadOnlySpan<<#=type#>>)source.Span);
        }

        public static <#=type#> Sum(this ReadOnlyMemory<<#=type#>> source)
        {
            return Sum(source.Span);
        }

        public static <#=type#> Sum(this Span<<#=type#>> source)
        {
            return Sum((ReadOnlySpan<<#=type#>>)source);
        }

        public static <#=type#> Sum(this ReadOnlySpan<<#=type#>> source)
        {
            Error.ThrowIfEmpty(source.IsEmpty);
            fixed (<#=type#>* ptr = source)
            {
                SumCore(ptr, source.Length, out var result);
                return result;
            }
        }
<# } #>
    }
}